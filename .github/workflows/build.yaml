---
name: Build

on:
  pull_request:
    branches: ["master"]
    paths: ["apps/**"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  pre-job:
    name: Pre-Job
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
      all_changed_and_modified_files: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Determine changed files
        uses: JJGadgets/tj-actions-changed-files@9200e69727eb73eb060652b19946b8a2fdfb654b
        id: changed-files
        with:
          dir_names: true
          dir_names_max_depth: "1"
          path: apps

  changed-apps:
    if: ${{ needs.pre-job.outputs.any_changed == 'true' }}
    name: Get Changed Apps
    needs: pre-job
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract apps metadata
        id: apps
        working-directory: apps
        run: |
          apps=$(printf "%s/metadata.yaml\n" ${{ needs.pre-job.outputs.all_changed_and_modified_files }})
          apps=$(yq eval-all --indent=0 --output-format=json "[.]" ${apps})
          echo "apps=${apps}" >> $GITHUB_OUTPUT

  build:
    if: ${{ needs.pre-job.outputs.any_changed == 'true' }}
    name: Build/Test ${{ matrix.app.name }} (${{ matrix.platform }})
    needs: changed-apps
    runs-on: ${{ matrix.platform == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changed-apps.outputs.apps) }}
        platform: ["amd64", "arm64"]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image
        uses: docker/build-push-action@v6
        id: build
        with:
          build-args: |-
            VENDOR=${{ github.actor }}
            VERSION=${{ matrix.app.version }}
            REVISION=${{ github.sha }}
          outputs: |-
            type=docker
          context: ./apps/${{ matrix.app.name }}
          platforms: linux/${{ matrix.platform }}

      - name: Setup Goss
        if: ${{ matrix.app.test }}
        uses: mlipscombe/goss-installation-action@v1.2.2
        with:
          version: latest

      - name: Run Goss Tests
        if: ${{ matrix.app.test }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ./apps/${{ matrix.app.name }}/ci/goss.yaml
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: dgoss run ${{ steps.build.outputs.imageid }}

  status:
    if: ${{ always() }}
    name: Build Success
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Any jobs failed?
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: All jobs passed or skipped?
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
